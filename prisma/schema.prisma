generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model ANZSCO {
  id       Int     @id
  major    Int?
  subMajor Int?
  minor    Int?
  unit     Int?
  name     String? @db.VarChar(512)
  level    Int?
  jobs     Job[]

  @@index([major])
  @@index([subMajor])
  @@index([minor])
  @@index([unit])
}

model Certification {
  id                Int                 @id @default(autoincrement())
  type              String
  name              String
  JobCertifications JobCertifications[]
}

model Job {
  id               Int                 @id @default(autoincrement())
  city             String?
  country          String?
  state            String?
  title            String?             @db.VarChar(512)
  dateText         String?
  date             DateTime?
  domain           String?             @db.VarChar(512)
  domainId         String?
  text             String?             @db.Text
  url              String?             @db.VarChar(1024)
  region           String?
  employer         String?             @db.VarChar(512)
  intermediary     String?             @db.VarChar(512)
  email            String?             @db.VarChar(512)
  jobReferenceId   String?
  source           String?             @db.VarChar(512)
  telephone        String?             @db.VarChar(1024)
  duplicateId      String?
  maximumDegree    String?             @db.VarChar(512)
  minimumDegree    String?             @db.VarChar(512)
  otherDegrees     String?             @db.VarChar(512)
  preferredDegrees String?             @db.VarChar(512)
  requiredDegrees  String?             @db.VarChar(512)
  standardMajor    String?             @db.VarChar(512)
  minExperience    Float?
  maxExperience    Float?
  ANZSCOCode       Int?
  ANZSICCode       String?
  maxAnnualSalary  Float?
  maxHourlySalary  Float?
  minAnnualSalary  Float?
  minHourlySalary  Float?
  jobType          String?             @db.VarChar(512)
  BGTOcc           String?
  BGTOccName       String?
  SA4Code          String?
  jobId            Int?
  ANZSCO           ANZSCO?             @relation(fields: [ANZSCOCode], references: [id])
  certifications   JobCertifications[]
  skills           JobSkills[]

  @@index([ANZSCOCode], map: "Job_ANZSCOCode_fkey")
}

model JobCertifications {
  jobId           Int
  certificationId Int
  certification   Certification @relation(fields: [certificationId], references: [id])
  job             Job           @relation(fields: [jobId], references: [id])

  @@id([jobId, certificationId])
  @@index([certificationId], map: "JobCertifications_certificationId_fkey")
}

model JobSkills {
  jobId   Int
  skillId Int
  job     Job   @relation(fields: [jobId], references: [id])
  skill   Skill @relation(fields: [skillId], references: [id])

  @@id([jobId, skillId])
  @@index([skillId], map: "JobSkills_skillId_fkey")
}

model Skill {
  name        String
  clusterName String
  id          Int              @id @default(autoincrement())
  skills      JobSkills[]
  clusters    SkillClusters[]
  subjects    SubjectBgSkill[]
}

model SkillCluster {
  name         String
  category     String
  id           Int                       @id @default(autoincrement())
  descriptions SkillClusterDescription[]
  skills       SkillClusters[]
  subjects     SubjectBgCluster[]
}

model SkillClusterDescription {
  id          Int          @id @default(autoincrement())
  source      String
  description String       @db.Text
  clusterId   Int
  name        String
  cluster     SkillCluster @relation(fields: [clusterId], references: [id])

  @@index([clusterId], map: "SkillClusterDescription_clusterId_fkey")
}

model SkillClusters {
  clusterId Int
  skillId   Int
  cluster   SkillCluster @relation(fields: [clusterId], references: [id])
  skill     Skill        @relation(fields: [skillId], references: [id])


  @@id([clusterId, skillId])
  @@index([skillId], map: "SkillClusters_skillId_fkey")
}

// Skills

model Subject {
  id            Int                @id @default(autoincrement())
  code          String
  name          String             @db.VarChar(1024)
  sfia          SubjectSfiaSkill[]
  skills        SubjectBgCluster[]
  sfiaEstimates SfiaEstimate[]
  handbook      String             @db.Text
  los           String             @db.Text
  losIntro      String             @db.Text
  readingList   String             @db.Text

  @@index([code])
}

model SfiaSkill {
  id               Int                @id @default(autoincrement())
  code             String
  description      String             @db.Text
  guidance         String             @db.Text
  version          Int
  levels           SfiaLevel[]
  subjects         SubjectSfiaSkill[]
  subjectEstimates SfiaEstimate[]

  @@index([code])
}

model SfiaLevel {
  id          Int       @id @default(autoincrement())
  level       Int
  description String    @db.Text
  skillId     Int
  skill       SfiaSkill @relation(fields: [skillId], references: [id])
}

model SfiaEstimate {
  id        Int       @id @default(autoincrement())
  subjectId Int
  subject   Subject   @relation(fields: [subjectId], references: [id])
  sfiaId    Int
  sfia      SfiaSkill @relation(fields: [sfiaId], references: [id])
  overall   Float
  l1        Float?
  l2        Float?
  l3        Float?
  l4        Float?
  l5        Float?
  l6        Float?
  l7        Float?
  rank      Float?
}

// model BgEstimate {
//   id        Int       @id @default(autoincrement())
//   subjectId Int
//   subject   Subject   @relation(fields: [subjectId], references: [id])
//   clusterId    Int
//   cluster      SkillCluster @relation(fields: [clusterId], references: [id])
//   overall   Float
//   skills        BgEstimateSkill[]
// }

// model BgEstimateSkill {
//   bgEstimateId Int
//   bgEstimate
// }

model SubjectSfiaSkill {
  id        Int       @id @default(autoincrement())
  subjectId Int
  subject   Subject   @relation(fields: [subjectId], references: [id])
  sfiaId    Int
  sfia      SfiaSkill @relation(fields: [sfiaId], references: [id])
  level     Int
}

model SubjectBgCluster {
  id        Int              @id @default(autoincrement())
  subjectId Int
  subject   Subject          @relation(fields: [subjectId], references: [id])
  clusterId Int
  cluster   SkillCluster     @relation(fields: [clusterId], references: [id])
  skills    SubjectBgSkill[]
}

model SubjectBgSkill {
  clusterId Int
  skillId   Int
  cluster   SubjectBgCluster @relation(fields: [clusterId], references: [id])
  skill     Skill            @relation(fields: [skillId], references: [id])

  @@id([clusterId, skillId])
}
