generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model ANZSCO {
  id             Int              @id
  name           String?          @db.VarChar(512)
  level          Int?
  major          Int?
  minor          Int?
  subMajor       Int?
  unit           Int?
  description    String?          @db.Text
  jobs           Job[]
  jobProjections JobProjections[]

  @@index([major])
  @@index([subMajor])
  @@index([minor])
  @@index([unit])
}

model JobProjections {
  id        Int    @id @default(autoincrement())
  ANZSCO    ANZSCO @relation(fields: [id], references: [id])
  level2021 Float
  level2026 Float
  growth    Float
}

model Certification {
  id                Int                 @id @default(autoincrement())
  type              String
  name              String
  JobCertifications JobCertifications[]
}

model Job {
  id               Int                 @id @default(autoincrement())
  city             String?
  country          String?
  state            String?
  title            String?             @db.VarChar(512)
  dateText         String?
  date             Int?
  domain           String?             @db.VarChar(512)
  domainId         String?
  text             String?             @db.Text
  url              String?             @db.VarChar(1024)
  region           String?
  employer         String?             @db.VarChar(512)
  intermediary     String?             @db.VarChar(512)
  email            String?             @db.VarChar(512)
  jobReferenceId   String?
  source           String?             @db.VarChar(512)
  telephone        String?             @db.VarChar(1024)
  duplicateId      String?
  maximumDegree    String?             @db.VarChar(512)
  minimumDegree    String?             @db.VarChar(512)
  otherDegrees     String?             @db.VarChar(512)
  preferredDegrees String?             @db.VarChar(512)
  requiredDegrees  String?             @db.VarChar(512)
  standardMajor    String?             @db.VarChar(512)
  minExperience    Float?
  maxExperience    Float?
  ANZSCOCode       Int?
  ANZSICCode       String?
  maxAnnualSalary  Float?
  maxHourlySalary  Float?
  minAnnualSalary  Float?
  minHourlySalary  Float?
  jobType          String?             @db.VarChar(512)
  BGTOcc           String?
  BGTOccName       String?
  SA4Code          String?
  jobId            Int?
  ANZSCO           ANZSCO?             @relation(fields: [ANZSCOCode], references: [id])
  certifications   JobCertifications[]
  skills           JobSkills[]

  @@index([ANZSCOCode], map: "Job_ANZSCOCode_fkey")
  @@index([date])
}

model JobCertifications {
  jobId           Int
  certificationId Int
  certification   Certification @relation(fields: [certificationId], references: [id])
  job             Job           @relation(fields: [jobId], references: [id])

  @@id([jobId, certificationId])
  @@index([certificationId], map: "JobCertifications_certificationId_fkey")
}

model JobSkills {
  jobId   Int
  skillId Int
  job     Job   @relation(fields: [jobId], references: [id])
  skill   Skill @relation(fields: [skillId], references: [id])

  @@id([jobId, skillId])
  @@index([skillId], map: "JobSkills_skillId_fkey")
}

model Skill {
  name        String
  clusterName String
  id          Int              @id @default(autoincrement())
  skills      JobSkills[]
  clusters    SkillClusters[]
  subjects    SubjectBgSkill[]
}

model SkillCluster {
  name         String
  category     String
  id           Int                       @id @default(autoincrement())
  descriptions SkillClusterDescription[]
  skills       SkillClusters[]
  subjects     SubjectBgCluster[]
}

model SkillClusterDescription {
  id          Int          @id @default(autoincrement())
  source      String
  description String       @db.Text
  clusterId   Int
  name        String
  cluster     SkillCluster @relation(fields: [clusterId], references: [id])

  @@index([clusterId], map: "SkillClusterDescription_clusterId_fkey")
}

model SkillClusters {
  clusterId Int
  skillId   Int
  cluster   SkillCluster @relation(fields: [clusterId], references: [id])
  skill     Skill        @relation(fields: [skillId], references: [id])

  @@id([clusterId, skillId])
  @@index([skillId], map: "SkillClusters_skillId_fkey")
}

model Subject {
  id            Int                @id @default(autoincrement())
  code          String
  handbook      String             @db.Text
  los           String             @db.Text
  losIntro      String             @db.Text
  readingList   String             @db.Text
  name          String             @db.VarChar(1024)
  sfiaEstimates SfiaEstimate[]
  skills        SubjectBgCluster[]
  sfia          SubjectSfiaSkill[]

  @@index([code])
}

model SfiaSkill {
  id               Int                @id @default(autoincrement())
  code             String
  description      String             @db.Text
  version          Int
  guidance         String             @db.Text
  name             String
  subjectEstimates SfiaEstimate[]
  levels           SfiaLevel[]
  subjects         SubjectSfiaSkill[]

  @@index([code])
}

model SfiaLevel {
  id          Int       @id @default(autoincrement())
  level       Int
  description String    @db.Text
  skillId     Int
  skill       SfiaSkill @relation(fields: [skillId], references: [id])

  @@index([skillId], map: "SfiaLevel_skillId_fkey")
}

model SfiaEstimate {
  id        Int       @id @default(autoincrement())
  subjectId Int
  sfiaId    Int
  overall   Float
  l1        Float?
  l2        Float?
  l3        Float?
  l4        Float?
  l5        Float?
  l6        Float?
  l7        Float?
  rank      Float?
  sfia      SfiaSkill @relation(fields: [sfiaId], references: [id])
  subject   Subject   @relation(fields: [subjectId], references: [id])

  @@index([sfiaId], map: "SfiaEstimate_sfiaId_fkey")
  @@index([subjectId], map: "SfiaEstimate_subjectId_fkey")
}

model SubjectSfiaSkill {
  id        Int       @id @default(autoincrement())
  subjectId Int
  sfiaId    Int
  level     Int
  sfia      SfiaSkill @relation(fields: [sfiaId], references: [id])
  subject   Subject   @relation(fields: [subjectId], references: [id])

  @@index([sfiaId], map: "SubjectSfiaSkill_sfiaId_fkey")
  @@index([subjectId], map: "SubjectSfiaSkill_subjectId_fkey")
}

model SubjectBgCluster {
  id        Int              @id @default(autoincrement())
  subjectId Int
  clusterId Int
  cluster   SkillCluster     @relation(fields: [clusterId], references: [id])
  subject   Subject          @relation(fields: [subjectId], references: [id])
  skills    SubjectBgSkill[]

  @@index([clusterId], map: "SubjectBgCluster_clusterId_fkey")
  @@index([subjectId], map: "SubjectBgCluster_subjectId_fkey")
}

model SubjectBgSkill {
  clusterId Int
  skillId   Int
  cluster   SubjectBgCluster @relation(fields: [clusterId], references: [id])
  skill     Skill            @relation(fields: [skillId], references: [id])

  @@id([clusterId, skillId])
  @@index([skillId], map: "SubjectBgSkill_skillId_fkey")
}

model Program {
  id              Int                     @id @default(autoincrement())
  name            String                  @db.VarChar(512)
  code            String
  url             String                  @db.VarChar(512)
  description     String                  @db.Text
  structureSource String                  @db.LongText
  sequenceSource  String                  @db.LongText
  updated         String?
  handbook        Handbook[]
  specialisations SpecialisationProgram[]
}

model SpecialisationProgram {
  program          Program        @relation(fields: [programId], references: [id])
  programId        Int
  specialisation   Specialisation @relation(fields: [specialisationId], references: [id])
  specialisationId Int

  @@id([programId, specialisationId])
}

model Specialisation {
  id              Int                     @id @default(autoincrement())
  url             String                  @db.VarChar(512)
  name            String                  @db.VarChar(512)
  code            String
  legacyCode      String?
  description     String?                 @db.Text
  availability    String?                 @db.Text
  structureSource String?                 @db.LongText
  sequenceSource  String?                 @db.LongText
  updated         String?
  handbook        Handbook[]
  programs        SpecialisationProgram[]
}

model Handbook {
  id               Int             @id @default(autoincrement())
  nodeId           Int
  programId        Int?
  program          Program?        @relation(fields: [programId], references: [id])
  specialisationId Int?
  specialisaton    Specialisation? @relation(fields: [specialisationId], references: [id])
  parentId         Int?
  text             String?         @db.Text
  folder           Boolean?
  type             String?
  number           Int?
  credits          Int?
  level            Int?
  reference        Int?
  flagged          Boolean?
}

// views

// CREATE OR REPLACE VIEW AnzscoJob AS
//     SELECT J.id, J.title, J.employer, J.maxAnnualSalary, J.dateText, J.`date`, J.maxHourlySalary, A.major, A.subMajor, A.minor, A.unit, A.id as code
//     FROM Job as J, ANZSCO as A
//     WHERE J.ANZSCOCode = A.id;

model AnzscoJob {
  id              Int    @id
  name            String
  major           Int
  unit            Int
  minor           Int
  subMajor        Int
  code            Int
  employer        String
  maxAnnualSalary Float
  maxHourlySalary Float
  dateText        String
  date            Int

}
